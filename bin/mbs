#!/usr/bin/env python

__author__ = 'abdul'

import sys
import traceback
import os

from dargparse import dargparse
from bson.objectid import ObjectId
from mbs.mbs import get_mbs
from mbs.backup import STATE_SUCCEEDED

###############################################################################
# MAIN
###############################################################################
def main(args):
    parser = dargparse.build_parser(PARSER_DEF)

    if len(args) < 1:
        parser.print_help()
        return

    # Parse the arguments and call the function of the selected cmd
    parsed_args = parser.parse_args(args)
    # get the function to call from the parser framework
    command_function = parsed_args.func

    return command_function(parsed_args)

###############################################################################
# Commands
###############################################################################
def start_engine(parsed_args):
    engine_id = parsed_args.engineId

    backup_engine = _get_engine(engine_id)
    backup_engine.start()

###############################################################################
def stop_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)
    engine.stop()

###############################################################################
def start_plan_manager(parsed_args):
    manager = get_mbs().plan_manager
    manager.start()

###############################################################################
def stop_plan_manager(parsed_args):
    print get_mbs().stop_plan_manager()

###############################################################################
def generate_audit_reports(parsed_args):
    global_auditor = get_mbs().global_auditor
    global_auditor.generate_yesterday_audit_reports()

###############################################################################
def download_backup(parsed_args):

    try:
        backup_id = parsed_args.backupId
        bc = get_mbs().backup_collection
        backup = bc.find_one({"_id": ObjectId(backup_id)})

        if backup:
            if backup.state == STATE_SUCCEEDED:
                if not backup.target_reference.expired:
                    backup.target.get_file(backup.target_reference, os.getcwd())
                else:
                    print ("Failed to download. Backup '%s' is expired." %
                           backup_id)
                    exit(1)


            else:
                print ("Failed to download. Backup '%s' never succeeded."
                       % backup_id)
                exit(1)
        else:
            print "No such backup '%s'" % backup_id
            exit(1)
    except Exception, e:
        print "%s" % e
        exit(1)

###############################################################################
# Helpers
###############################################################################
def _get_engine(engine_id=None):

    if not engine_id:
        return get_mbs().get_default_engine()
    else:
        return get_mbs().get_engine(engine_id)

###############################################################################
# command parser
###############################################################################
PARSER_DEF = {
    "prog": "mbs",
    "usage": "Usage: mbs [<options>] <command> [<command-args>]",
    "description" : "contains commands for the mongodb-backup-system",
    "children":[
        #### start-engine ####
            {
            "prog": "start-engine",
            "shortDescription" : "starts a backup engine",
            "description" : "starts a backup engine",
            "function": start_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                }
            ]
        },

        #### stop-engine ####
            {
            "prog": "stop-engine",
            "shortDescription" : "stops a backup engine",
            "description" : "stops a backup engine",
            "function": stop_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                }
            ]
        },
            {
            "prog": "start-plan-manager",
            "shortDescription" : "starts the plan manager",
            "description" : "starts the plan manager",
            "function": start_plan_manager
        },

        #### stop-plan-manager ####
            {
            "prog": "stop-plan-manager",
            "shortDescription" : "stops the plan manager",
            "description" : "stops the plan manager",
            "function": stop_plan_manager
        },
            {
            "prog": "generate-audit-reports",
            "shortDescription" : "generates audit reports as of yesterday",
            "description" : "generates audit reports as of yesterday",
            "function": generate_audit_reports
        },

            {
            "prog": "download-backup",
            "shortDescription" : "Downloads backup file from target to "
                                 "current working directory",
            "description" : "Downloads backup file from target to "
                            "current working directory",
            "args": [
                {
                "name": "backupId",
                "type" : "positional",
                "nargs": 1,
                "displayName": "BACKUP_ID",
                "help": "Backup id"
            }],
            "function": download_backup
        }
    ]
}

###############################################################################
########################                   ####################################
########################     BOOTSTRAP     ####################################
########################                   ####################################
###############################################################################


if __name__ == '__main__':
    try:

        main(sys.argv[1:])
    except (SystemExit, KeyboardInterrupt) , e:
        if e.code == 0:
            pass
        else:
            raise
    except:
        traceback.print_exc()