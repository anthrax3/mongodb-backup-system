#!/usr/bin/env python

__author__ = 'abdul'

import sys
import traceback
import os
import signal

from dargparse import dargparse
from bson.objectid import ObjectId
from mbs.mbs import get_mbs
from mbs.engine import STATUS_STOPPED, STATUS_STOPPING, STATUS_RUNNING
from mbs.utils import wait_for, document_pretty_string
from mbs import mbs_logging

###############################################################################
# MAIN
###############################################################################
def main(args):
    parser = dargparse.build_parser(PARSER_DEF)

    if len(args) < 1:
        parser.print_help()
        return

    # Parse the arguments and call the function of the selected cmd
    parsed_args = parser.parse_args(args)
    # get the function to call from the parser framework
    command_function = parsed_args.func

    return command_function(parsed_args)

###############################################################################
# Engine Commands
###############################################################################
def start_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)

    status = engine.get_status()
    if status["status"] == STATUS_RUNNING:
        print "Engine already started"
        return
    elif status["status"] == STATUS_STOPPING:
        print ("Engine is stopping now. Please wait until it is completely "
               "stopped then try starting again")
        return

    _do_start_engine(engine, fork=parsed_args.fork)

    def engine_started():
        return engine.get_status()["status"] == STATUS_RUNNING
    wait_for(engine_started, timeout=5)

    if engine_started():
        print "Engine started successfully!"
    else:
        print "Engine did not start. Please check logs"

###############################################################################
def _do_start_engine(engine, fork=False):

    if fork:
        child_pid = os.fork()
        if child_pid:
            # parent process. return
            print "Forked engine process %s" % child_pid
            return
        else:
            # need to disown yourself, Son
            os.setsid()
            os.umask(0)
    else: # log to stdout
        mbs_logging.log_to_stdout()

    # forked child process
    engine.start()

    # register signal handler
    def engine_stopped():
        return engine.get_status()["status"] == STATUS_STOPPED

    def stop_this_engine(signal_val, frame):
        print "Received a SIGTERM signal. Stopping engine"
        engine.stop()
        print "Waiting for engine to stop"
        wait_for(engine_stopped, timeout=100)
        if engine_stopped():
            exit(0)
        else:
            print "Unable to stop engine within 100 seconds"
            exit(1)

    # register a signal handler to stop this engine
    signal.signal(signal.SIGTERM, stop_this_engine)

###############################################################################
def stop_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)
    status = engine.get_status()
    if status["status"] == STATUS_STOPPING:
        print "A stop request has already been made"
        return
    elif status["status"] == STATUS_STOPPED:
        print "Engine is not running"
        return

    engine.stop()

###############################################################################
def restart_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)

    # stop the engine and wait for it is completely stopped
    engine.stop()
    def engine_stopped():
        return engine.get_status()["status"] == STATUS_STOPPED

    wait_for(engine_stopped, timeout=100)

    if engine_stopped():
        start_engine(parsed_args)
    else:
        print "Engine did not stop yet. Please try later"
        exit(1)

###############################################################################
def status_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)
    print document_pretty_string(engine.get_status())

###############################################################################
# Plan Manager Commands
###############################################################################
def start_plan_manager(parsed_args):
    manager = get_mbs().plan_manager
    if not manager:
        print "No plan manager configured"
        exit(1)

    status = manager.get_status()
    if status["status"] == STATUS_RUNNING:
        print "Plan Manager already started"
        return
    elif status["status"] == STATUS_STOPPING:
        print ("Plan Manager is stopping now. Please wait until it is "
               "completely stopped then try starting again")
        return

    _do_start_plan_manager(fork=parsed_args.fork)

    def manager_started():
        return manager.get_status()["status"] == STATUS_RUNNING
    wait_for(manager_started, timeout=5)

    if manager_started():
        print "Plan Manager started successfully!"
    else:
        print "Plan Manager did not start. Please check logs"

###############################################################################
def _do_start_plan_manager(fork=False):
    if fork:
        child_pid = os.fork()
        if child_pid:
            # parent process. return
            print "Forked plan manager process %s" % child_pid
            return
        else:
            # need to disown yourself, Son
            os.setsid()
            os.umask(0)
    else: # log to stdout
        mbs_logging.log_to_stdout()

    # forked child process
    manager = get_mbs().plan_manager
    manager.start()

###############################################################################
def stop_plan_manager(parsed_args):
    manager = get_mbs().plan_manager
    if not manager:
        print "No plan manager configured"
        exit(1)

    status = manager.get_status()
    if status["status"] == STATUS_STOPPING:
        print "A stop request has already been made"
        return
    elif status["status"] == STATUS_STOPPED:
        print "Plan Manager is not running"
        return

    manager.stop()

    # register signal handler
    def manager_stopped():
        return manager.get_status()["status"] == STATUS_STOPPED

    def stop_this_manager(signal_val, frame):
        print "Received a SIGTERM signal. Stopping plan manager"
        manager.stop()
        print "Waiting for plan manager to stop"
        wait_for(manager_stopped, timeout=100)
        if manager_stopped():
            exit(0)
        else:
            print "Unable to stop plan manager within 100 seconds"
            exit(1)

    # register a signal handler to stop this manager
    signal.signal(signal.SIGTERM, stop_this_manager)

###############################################################################
def restart_plan_manager(parsed_args):
    manager = get_mbs().plan_manager

    if not manager:
        print "No plan manager configured"
        exit(1)
    # stop the manager and wait for it is completely stopped
    manager.stop()
    def manager_stopped():
        return manager.get_status()["status"] == STATUS_STOPPED

    wait_for(manager_stopped, timeout=100)

    if manager_stopped():
        start_plan_manager(parsed_args)
    else:
        print "Manager did not stop yet. Please try later"
        exit(1)

###############################################################################
def status_plan_manager(parsed_args):
    manager = get_mbs().plan_manager
    if not manager:
        print "No plan manager configured"
        exit(1)

    print document_pretty_string(manager.get_status())

###############################################################################
def run_plan_generators(parsed_args):
    manager = get_mbs().plan_manager
    if not manager:
        print "No plan manager configured"
        exit(1)

    manager._run_plan_generators()


###############################################################################
# Other Commands
###############################################################################
def generate_audit_reports(parsed_args):
    global_auditor = get_mbs().plan_manager.global_auditor
    global_auditor.generate_yesterday_audit_reports()

###############################################################################
def download_backup(parsed_args):

    try:
        backup_id = parsed_args.backupId
        bc = get_mbs().backup_collection
        backup = bc.find_one({"_id": ObjectId(backup_id)})

        if backup:
            if backup.target_reference:
                if not backup.target_reference.expired:
                    backup.target.get_file(backup.target_reference, os.getcwd())
                else:
                    print ("Failed to download. Backup '%s' is expired." %
                           backup_id)
                    exit(1)


            else:
                print ("Failed to download. Backup '%s' never uploaded."
                       % backup_id)
                exit(1)
        else:
            print "No such backup '%s'" % backup_id
            exit(1)
    except Exception, e:
        print "%s" % e
        exit(1)

###############################################################################
def reschedule_backup(parsed_args):

    try:
        backup_id = parsed_args.backupId
        bc = get_mbs().backup_collection
        backup = bc.find_one({"_id": ObjectId(backup_id)})

        if backup:
           get_mbs().plan_manager.reschedule_backup(backup)
        else:
            print "No such backup '%s'" % backup_id
            exit(1)
    except Exception, e:
        print "%s" % e
        exit(1)

###############################################################################
def reschedule_all_backups(parsed_args):

    try:
        get_mbs().plan_manager.reschedule_all_failed_backups()
    except Exception, e:
        print "%s" % e
        exit(1)

###############################################################################
# Helpers
###############################################################################
def _get_engine(engine_id=None):

    if not engine_id:
        return get_mbs().get_default_engine()
    else:
        return get_mbs().get_engine(engine_id)

###############################################################################
# command parser
###############################################################################
PARSER_DEF = {
    "prog": "mbs",
    "usage": "Usage: mbs [<options>] <command> [<command-args>]",
    "description" : "contains commands for the mongodb-backup-system",
    "children":[
        #### start-engine ####
            {
            "prog": "start-engine",
            "shortDescription" : "starts a backup engine",
            "description" : "starts a backup engine",
            "function": start_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                },
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },

        #### stop-engine ####
            {
            "prog": "stop-engine",
            "shortDescription" : "stops a backup engine",
            "description" : "stops a backup engine",
            "function": stop_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                }
            ]
        },
        #### status-engine ####
            {
            "prog": "status-engine",
            "shortDescription" : "gets the status of a backup engine",
            "description" : "gets the status of a backup engine",
            "function": status_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                }
            ]
        },

        #### restart-engine ####
            {
            "prog": "restart-engine",
            "shortDescription" : "restarts the backup engine",
            "description" : "restarts the backup engine",
            "function": restart_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                },
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },
            {
            "prog": "start-plan-manager",
            "shortDescription" : "starts the plan manager",
            "description" : "starts the plan manager",
            "function": start_plan_manager,
            "args": [
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },

        #### stop-plan-manager ####
            {
            "prog": "stop-plan-manager",
            "shortDescription" : "stops the plan manager",
            "description" : "stops the plan manager",
            "function": stop_plan_manager
        },
        #### status-plan-manager ####
            {
            "prog": "status-plan-manager",
            "shortDescription" : "gets the status of the plan manager",
            "description" : "gets the status of the plan manager",
            "function": status_plan_manager
        },

        #### restart-plan-manager ####
            {
            "prog": "restart-plan-manager",
            "shortDescription" : "restart plan manager",
            "description" : "restart plan manager",
            "function": restart_plan_manager,
            "args": [
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },
        #### restart-plan-manager ####
            {
            "prog": "run-plan-generators",
            "shortDescription" : "Runs plans generators",
            "description" : "Runs plans generators",
            "function": run_plan_generators
        },
            {
            "prog": "generate-audit-reports",
            "shortDescription" : "generates audit reports as of yesterday",
            "description" : "generates audit reports as of yesterday",
            "function": generate_audit_reports
        },

            {
            "prog": "download-backup",
            "shortDescription" : "Downloads backup file from target to "
                                 "current working directory",
            "description" : "Downloads backup file from target to "
                            "current working directory",
            "args": [
                {
                "name": "backupId",
                "type" : "positional",
                "nargs": 1,
                "displayName": "BACKUP_ID",
                "help": "Backup id"
            }],
            "function": download_backup
        },

            {
            "prog": "reschedule-backup",
            "shortDescription" : "Reschedules specified backup",
            "description" : "Reschedules specified backup. "
                            "Only applicable to failed backups",
            "args": [
                    {
                    "name": "backupId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "BACKUP_ID",
                    "help": "Backup id"
                }],
            "function": reschedule_backup
        },

            {
            "prog": "reschedule-all-backups",
            "shortDescription" : "Reschedules all failed backups",
            "description" : "Reschedules all failed backups",
            "function": reschedule_all_backups
        }
    ]
}

###############################################################################
########################                   ####################################
########################     BOOTSTRAP     ####################################
########################                   ####################################
###############################################################################


if __name__ == '__main__':
    try:

        main(sys.argv[1:])
    except (SystemExit, KeyboardInterrupt) , e:
        if e.code == 0:
            pass
        else:
            raise
    except:
        traceback.print_exc()